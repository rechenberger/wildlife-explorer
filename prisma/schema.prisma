// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol", "orderByNulls"]
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL_POOL")
    directUrl = env("DATABASE_URL_DIRECT")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    players       Player[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Player {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name     String @unique
    lat      Float
    lng      Float
    metadata Json?

    userId               String
    user                 User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
    foundWildlife        Wildlife[]
    battleParticipations BattleParticipation[]

    scanCooldownAt  DateTime?
    catches         Catch[]   @relation("CatchPlayer")
    originalCatches Catch[]   @relation("CatchOriginalPlayer")

    @@index([lat, lng])
    @@index([userId])
}

model Catch {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    metadata Json @default("{}")

    name String?

    playerId String
    player   Player @relation("CatchPlayer", fields: [playerId], references: [id], onDelete: Cascade)

    originalPlayerId String
    originalPlayer   Player @relation("CatchOriginalPlayer", fields: [originalPlayerId], references: [id], onDelete: Cascade)

    wildlifeId String
    wildlife   Wildlife @relation(fields: [wildlifeId], references: [id], onDelete: Cascade)

    seed String

    battleOrderPosition Int?

    @@unique([wildlifeId, playerId])
    @@index([playerId, battleOrderPosition])
}

model Wildlife {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    respawnsAt DateTime
    catches    Catch[]

    observationId Int  @unique
    taxonId       Int
    metadata      Json

    foundById String
    foundBy   Player @relation(fields: [foundById], references: [id], onDelete: Cascade)

    lat Float
    lng Float

    battleParticipations BattleParticipation[]

    @@index([lat, lng])
    @@index([taxonId])
    @@index([observationId])
}

model Battle {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    metadata Json
    status   BattleStatus

    battleParticipants BattleParticipation[]
}

enum BattleStatus {
    INVITING
    IN_PROGRESS
    FINISHED
    CANCELLED
}

model BattleParticipation {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    metadata Json
    isWinner Boolean?

    playerId String?
    player   Player? @relation(fields: [playerId], references: [id], onDelete: Cascade)

    wildlifeId String?
    wildlife   Wildlife? @relation(fields: [wildlifeId], references: [id], onDelete: Cascade)

    battleId String
    battle   Battle @relation(fields: [battleId], references: [id], onDelete: Cascade)

    @@index([playerId])
    @@index([wildlifeId])
}
